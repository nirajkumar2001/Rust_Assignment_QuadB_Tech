Given a binary tree, implement a function that returns the maximum depth of the tree.
I can sove it very easily by recursion in which we call function root->left, root->right then whenever we maxdepth return after adding 1
 in this  i am writing the code from the scratch write the function to build and bst and then another functioin to print the inoder traversal of the  bst 
and the the final functio which  i have to solved maxdepth the binary tree  i have solved it  in c++;
#include <iostream>
#include <vector>
#include <queue>
#include <algorithm>
#include<limits.h>
#include<bits/stdc++.h>
using namespace std;

//  Member functions of Binary Tree
struct TreeNode {
    int val;
    TreeNode *left;
    TreeNode *right;
    TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
};

// Function to build a binary tree from a vector of integers.
TreeNode* buildTree( vector<int>& nums) {
    if (nums.empty()) return nullptr;

    vector<TreeNode*> nodes;
    nodes.reserve(nums.size());

    // Create all nodes
    for (int num : nums) {
        if (num != INT_MAX) {
// if there is any null value or INT_MAX which is out of range then ignore it 
            nodes.push_back(new TreeNode(num));
        } else {
            nodes.push_back(nullptr);
        }
    }

    // Link nodes to form the tree
    int n = nodes.size();
    for (int i = 0; i < n; ++i) {
        if (nodes[i] != nullptr) {
            int leftIdx = 2 * i + 1;
            int rightIdx = 2 * i + 2;
            if (leftIdx < n) {
                nodes[i]->left = nodes[leftIdx];
            }
            if (rightIdx < n) {
                nodes[i]->right = nodes[rightIdx];
            }
        }
    }

    return nodes[0]; // Return the root of the binary tree
}

// Function to perform inorder traversal of the binary tree and print elements.
void inorder(TreeNode* root) {
    if (root == nullptr) return;

    inorder(root->left);
    cout << root->val << " ";
    inorder(root->right);
}

// Function to find the maximum depth of the binary tree.
int maxDepth(TreeNode* root) {
    if (root == nullptr) return 0;

    int leftDepth = maxDepth(root->left);
    int rightDepth = maxDepth(root->right);

    return 1 + max(leftDepth, rightDepth);
}

// Function to delete all nodes of the binary tree to avoid memory leaks.
void deleteTree(TreeNode* root) {
    if (root == nullptr) return;

    deleteTree(root->left);
    deleteTree(root->right);
    delete root;
}

int main() {
     int n; 
     cin>>n;
     vector<int>nums(n);
     for( int i=0; i<n;i++){
         cin>>nums[i];
     }

    // build the Binary tree
    TreeNode* root = buildTree(nums);

    //  Print the  inorder of the tree
    cout << "Inorder traversal of the binary tree:" << endl;
    inorder(root);
    cout << endl;

    // calculate the depth of the binary tree and then return the depth
    int depth = maxDepth(root);
    cout << "Maximum depth of the binary tree: " << depth << endl;

    //  to avoid memory leak delete the nodes
    deleteTree(root);

    return 0;
}
